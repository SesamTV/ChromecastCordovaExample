define([
    'module',
    '../util/CustomError',
    '../abstract/BaseSystem',
    '../util/Class',
    './input/KeyCodeMap'
], function (module, CustomError, BaseSystem, klass, keyCodeMap) {
    'use strict';
    /**
     * usage:
     *
     *      ErrorManager.log('my error info');
     *      ErrorManager.error('my warn info');
     *      ErrorManager.error('an error occured',FZ_CODE).setDialog(); // show popup
     *      //error message with tokens
     *      ErrorManager.error('an error with tokens: %o %o',null,{values:['token1','token2']}).setDialog();
     *      //attach actions to dialog buttons
     *      ErrorManager.error('my error').setDialog(function(dialogInst){console.log('ok button')},function(dialogInst){console.log('cancel button')});
     *      ErrorManager.setConfig('systemErrorDialog',false); //disable system error popup
     *      ErrorManager.setConfig('logError',true);//enable error logs in localStorage (if available)
     *
     *      //set error code (ex: plug with FZ)
     *      ErrorManager.setConfig('errorCode',{
     *          //key could be a number
     *          1:'system error',
     *          //or a string
     *          'FAILED':'hardware failure'
     *      });
     *      //the error message will be 'system error';
     *      ErrorManager.error('standard error',1).setDialog();
     *      //the error message will be 'hardware failure';
     *      ErrorManager.error('standard error','FAILED').setDialog();
     *
     *      //disable show in console (silence mode)
     *      ErrorManager.setConfig('showInConsole',false);
     *      //catch errors
     *      ErrorManager.on('error',function(){});
     *      //catch warns
     *      ErrorManager.on('warn',function(){});
     *      //catch all the logs
     *      ErrorManager.on('*',function(){});
     *      //remove listener
     *      var handler = ErrorManager.on('error',function(){});
     *      handler.remove();
     *      //show stored error logs (if available)
     *      ErrorManager.showErrorLog();
     *      //refresh window when click ok, close popup when click cancel
     *      ErrorManager.error('error occured, do you want to reload ?').setDialog(function(dialog){
     *          //clicked on 'ok' button
     *           window.location.reload();
     *      },function(dialog){
     *           //clicked on 'cancel' button
     *           dialog.destroy();
     *      });
     *
     * notice: all the system errors has 'error' as logLevel, system errors have  url and lineNumber info,
     * custom errors have only stack info (lineNumber is available for Firefox)
     *
     * error logs could be stored in localStorage for later analyse.
     *
     * todo: possibility of sending error logs back to server
     * @class com.sesamtv.core.engine.ErrorManager
     * @singleton
     * @extends com.sesamtv.core.abstract.BaseSystem
     * @requires com.sesamtv.core.util.CustomError
     * @param {Object} [args]
     */
    var ErrorManager = klass({
        extend: BaseSystem,
        singleton: true,
        constructor: function ErrorManager(args) {

            /**
             * @property Invalid
             * @type {com.sesamtv.core.util.CustomError}
             */
            this.Invalid = new CustomError({
                name: 'ErrorManager',
                log: true
            });
            this.config = {
                /**
                 * @cfg {Function} [dialogHandler] a function to create a dialog
                 */
                dialogHandler: null,
                /**
                 * @cfg {Boolean} [preventDefault=false] while catching global error, if throw the error (false) or not (true)
                 */
                preventDefault: false,
                /**
                 * @cfg {Boolean} [showInConsole=true] show error in console if available.
                 */
                showInConsole: true,
                /**
                 * @cfg {Boolean} [enableDialog=false]
                 */
                enableDialog: false,
                /**
                 * @cfg {Boolean} [logError=true] log errors in localStorage
                 */
                logError: true,
                logLevels: ['debug', 'error', 'info', 'log', 'warn'],
                /**
                 * @cfg {Function} a handler to translate error code
                 */
                errorCodeHandler: function (keyCode) {
                    var code = keyCodeMap.get(keyCode);
                    return code && (code.desc || code.key);
                },
                /**
                 * @cfg {Boolean} [catchSystemError=true] if catch the error generated by browser
                 */
                catchSystemError: true,
                /**
                 * @cfg {Boolean} [systemErrorDialog=true]
                 */
                systemErrorDialog: true,
                /**
                 * @cfg {Object} [dialogSetting] default dialog setting
                 */
                dialogSetting: null
            };
            this.addLogLevels();
            BaseSystem.call(this, args);
            this.config.catchSystemError && this.attachSystemError();

        },
        /**
         * @method showErrorLog
         * @returns {String}
         */
        showErrorLog: function () {
            return CustomError.showLog();
        },
        addLogLevels: function () {
            this.config.logLevels.forEach(function (level) {
                this[level] = function (message, id, opt) {
                    opt = opt || {};
                    var values = opt.values || [],
                        errorCodeHandler = this.config.errorCodeHandler,
                        errInst = Object.create(this.Invalid.prototype),
                        self = this,
                        returnHandler;

                    delete opt.values;

                    message = (errorCodeHandler ? errorCodeHandler(id) : null) || message;

                    this.Invalid.apply(errInst, [message].concat(values));

                    errInst.moreDetail(klass.applyIf({
                        errorId: id
                    }, opt));

                    if (self.config.logError) {
                        errInst.log(message);
                    }
                    //trigger event
                    self.emit(level, errInst);
                    //show in console
                    self.config.showInConsole && console && console[level] &&
                    console[level](errInst.message, errInst);
                    if (!self.config.enableDialog) {
                        return;
                    }
                    //method setDialog is only available for 10ms
                    setTimeout(function () {
                        delete returnHandler.setDialog;
                    }, 10);
                    returnHandler = {
                        setDialog: function (ok, cancel) {
                            var params = {
                                message: errInst.message,
                                ok: ok,
                                cancel: cancel,
                                dialogSetting: self.config.dialogSetting
                            };
                            if (self.config.dialogHandler) {
                                self.config.dialogHandler(params);
                            }
                            self.emit('setDialog', params);
                        }
                    };
                    return returnHandler;
                };
            }, this);
        },
        attachSystemError: function () {
            var oldH, self = this;

            function catchError(errorMsg, url, lineNumber) {
                if (!self.config.catchSystemError) {
                    return false;
                }
                //a fatal error
                var sysErr = self.error(errorMsg, null, {
                    url: url,
                    lineNumber: lineNumber
                });
                if (self.config.enableDialog && self.config.systemErrorDialog) {
                    sysErr.setDialog();
                }
                return self.config.preventDefault;
            }

            oldH = window.onerror;
            window.onerror = catchError;
            this.evts.globalError = {
                remove: function () {
                    window.onerror = oldH;
                }
            };
            return this.evts.globalError;
        },
        on: function (evtName, fnc) {
            var connects = [];
            if (evtName === "*") {
                this.config.logLevels.forEach(function (level) {
                    connects.push(BaseSystem.prototype.on.call(this, level, fnc));
                }, this);
                return {
                    remove: function () {
                        connects.forEach(function (c) {
                            c.remove();
                        });
                        connects.length = 0;
                    }
                };
            }
            return BaseSystem.prototype.on.call(this, evtName, fnc);

        }
    });
    return new ErrorManager(module.config());
});